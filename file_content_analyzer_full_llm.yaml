blueprint:
  name: Voice - File Content Analyzer (HTTP compatible)
  author: luuquangvu (modified by DoThai)
  description: >-
    Analyze and extract information from media or document files (supports both local files and HTTP URLs).
  domain: script
  homeassistant:
    min_version: 2025.8.0
  input:
    ai_task_settings:
      name: Settings for AI Task
      icon: mdi:robot-outline
      description: Set up the AI Task responsible for handling the analyzer task.
      collapsed: true
      input:
        ai_task_entity:
          name: AI Task Entity
          description: If left empty, the system will use the default settings under System - General.
          selector:
            entity:
              filter:
                domain: ai_task
          default:
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description: You can use these settings to finetune the prompts for your LLM.
      collapsed: true
      input:
        instructions_prompt:
          name: Instructions Prompt
          description: What the AI should do with the file.
          selector:
            text:
              multiline: true
          default: >-
            This argument is mandatory and must always be provided.
            The tool can analyze content and extract any type of information from an image, video, audio, or document.
        media_path_prompt:
          name: Media Path Prompt
          description: File path or HTTP URL to analyze.
          selector:
            text:
              multiline: true
          default: >-
            Provide a media path starting with either:
            - `local/` for local media (e.g., local/snapshots/latest.jpg)
            - or `http://` / `https://` for remote sources.
        mime_type_prompt:
          name: MIME Type Prompt
          description: MIME type of the media.
          selector:
            text:
              multiline: true
          default: >-
            Specify the MIME type (e.g., image/jpeg, video/mp4, application/pdf).
mode: parallel
max_exceeded: silent
variables:
  version: 20251101
fields:
  instructions:
    name: Instructions
    description: !input instructions_prompt
    selector:
      text:
        multiline: true
    required: true
  media_path:
    name: Media Path
    description: !input media_path_prompt
    selector:
      text:
    required: true
  mime_type:
    name: MIME Type
    description: !input mime_type_prompt
    selector:
      text:
    required: true

sequence:
  - variables:
      ai_task_entity: !input ai_task_entity
      instructions: "{{ instructions | default('') | trim }}"
      media_path: "{{ media_path | default('') | trim }}"
      mime_type: "{{ mime_type | default('') | trim }}"

  - if:
      - condition: template
        value_template: "{{ not instructions }}"
    then:
      - stop: "Missing 'instructions'. Please describe what to analyze."

  - if:
      - condition: template
        value_template: "{{ not media_path }}"
    then:
      - stop: "Missing 'media_path'. Please provide file path or URL."

  - if:
      - condition: template
        value_template: "{{ not mime_type.startswith(('image/', 'video/', 'audio/', 'text/', 'application/')) }}"
    then:
      - stop: "Invalid MIME type. Must start with image/, video/, audio/, text/, or application/."

  # ðŸ§  Smart detection of path type
  - variables:
      attachments: >
        {% if media_path.startswith('http://') or media_path.startswith('https://') %}
        [{ "media_content_id": "{{ media_path }}", "media_content_type": "{{ mime_type }}" }]
        {% else %}
        [{ "media_content_id": "media-source://media_source/{{ media_path }}", "media_content_type": "{{ mime_type }}" }]
        {% endif %}

  - choose:
      - conditions: "{{ ai_task_entity | length == 0 }}"
        sequence:
          - service: ai_task.generate_data
            data:
              task_name: Analyze content from a media or document file
              instructions: "{{ instructions }}"
              attachments: "{{ attachments }}"
            response_variable: result
      - default:
          - service: ai_task.generate_data
            data:
              task_name: Analyze content from a media or document file
              instructions: "{{ instructions }}"
              attachments: "{{ attachments }}"
              entity_id: "{{ ai_task_entity }}"
            response_variable: result

  - variables:
      response:
        data: "{{ result.data }}"
  - stop: ""
    response_variable: response
