blueprint:
  name: Voice - File Content Analyzer
  author: (modified by DoThai)
  description: >-
    Analyze and extract information from media, document, or camera entities (supports direct camera image URL without saving files).
  domain: script
  homeassistant:
    min_version: 2025.8.0

  input:
    ai_task_settings:
      name: Settings for AI Task
      icon: mdi:robot-outline
      collapsed: true
      input:
        ai_task_entity:
          name: AI Task Entity
          selector:
            entity:
              filter:
                domain: ai_task
          default:

    prompt_settings:
      name: Prompt settings
      icon: mdi:robot
      collapsed: true
      input:
        instructions_prompt:
          name: Instructions Prompt
          selector:
            text:
              multiline: true
          default: >-
            Describe what the AI should analyze or extract from the image or document.
        media_path_prompt:
          name: Media Path Prompt
          selector:
            text:
              multiline: true
          default: >-
            Provide a media path starting with:
            - `local/` for local media
            - or `http://` / `https://` for remote images.
        mime_type_prompt:
          name: MIME Type Prompt
          selector:
            text:
              multiline: true
          default: image/jpeg

    camera_input:
      name: Camera (optional)
      icon: mdi:cctv
      description: Select a camera to analyze directly (no file saved).
      selector:
        entity:
          filter:
            domain: camera
      default:

mode: parallel
max_exceeded: silent

variables:
  version: 20251101

fields:
  instructions:
    name: Instructions
    description: !input instructions_prompt
    selector:
      text:
        multiline: true
    required: true
  media_path:
    name: Media Path (ignored if camera selected)
    description: !input media_path_prompt
    selector:
      text:
    required: false
  mime_type:
    name: MIME Type
    description: !input mime_type_prompt
    selector:
      text:
    required: true

sequence:
  - variables:
      ai_task_entity: !input ai_task_entity
      camera_entity: !input camera_input
      instructions: "{{ instructions | default('') | trim }}"
      media_path: "{{ media_path | default('') | trim }}"
      mime_type: "{{ mime_type | default('') | trim }}"

  # ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
  - if:
      - condition: template
        value_template: "{{ not instructions }}"
    then:
      - stop: "Missing 'instructions'. Please describe what to analyze."

  - if:
      - condition: template
        value_template: "{{ not (camera_entity or media_path) }}"
    then:
      - stop: "Missing media source. Please provide a media path or select a camera."

  - if:
      - condition: template
        value_template: "{{ not mime_type.startswith(('image/', 'video/', 'audio/', 'text/', 'application/')) }}"
    then:
      - stop: "Invalid MIME type."

  # üì∏ N·∫øu c√≥ camera ‚Üí t·∫°o URL ·∫£nh tr·ª±c ti·∫øp
  - choose:
      - conditions: "{{ camera_entity is defined and camera_entity != '' }}"
        sequence:
          - variables:
              camera_image_url: >
                {{ states[camera_entity].attributes.entity_picture | default('') }}
          - if:
              - condition: template
                value_template: "{{ not camera_image_url }}"
            then:
              - stop: "This camera does not expose an image URL. Try another camera or specify a media path."
          - variables:
              attachments: >
                [{
                  "media_content_id": "{{ camera_image_url }}",
                  "media_content_type": "{{ mime_type }}"
                }]
    default:
      - variables:
          attachments: >
            {% if media_path.startswith('http://') or media_path.startswith('https://') %}
            [{ "media_content_id": "{{ media_path }}", "media_content_type": "{{ mime_type }}" }]
            {% else %}
            [{ "media_content_id": "media-source://media_source/{{ media_path }}", "media_content_type": "{{ mime_type }}" }]
            {% endif %}

  # üß† G·ªçi AI Task
  - choose:
      - conditions: "{{ ai_task_entity | length == 0 }}"
        sequence:
          - service: ai_task.generate_data
            data:
              task_name: Analyze content from a media or document file
              instructions: "{{ instructions }}"
              attachments: "{{ attachments }}"
            response_variable: result
    default:
      - service: ai_task.generate_data
        data:
          task_name: Analyze content from a media or document file
          instructions: "{{ instructions }}"
          attachments: "{{ attachments }}"
          entity_id: "{{ ai_task_entity }}"
        response_variable: result

  - variables:
      response:
        data: "{{ result.data }}"
  - stop: ""
    response_variable: response
