blueprint:
  name: Voice - File Content Analyzer
  author: Thaidv
  description: >-
    # Tool designed to analyze and extract all types of information from media and document files

    ## Blueprint Setup

    ### Required

    * Google Generative AI integration must be installed and configured.

    ### Optional

    * Adjust the prompts for each field used in the script. The descriptions guide the LLM to provide the correct input.

    ### Note

    * Provide a concise and precise description for the script. This description will enable the LLM to recognize that the script is designed to extract data from a media or document file.

    * Make sure to expose the script to Assist after the script has been saved.

    * Do not alter the default script name.
  domain: script
  homeassistant:
    min_version: 2025.8.0
  input:
    google_ai_settings:
      name: Settings for Google Generative AI
      icon: mdi:google
      description: These settings allow you to set up the Google Generative AI responsible for handling the analyzer task.
      collapsed: true
      input:
        google_ai_entity:
          name: Google AI Entity
          description: Select the Google Generative AI entity to use for analysis.
          selector:
            entity:
              domain: conversation
              integration: google_generative_ai
          default:
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description: You can use these settings to finetune the prompts for your specific LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        instructions_prompt:
          name: Instructions Prompt
          description: The prompt which will be used for the LLM can provide the request for the query.
          selector:
            text:
              multiline: true
          default: >-
            This argument is mandatory and must always be provided.

            The tool can analyze content and extract any type of information from an image, video, audio, or document, including text, numbers, objects, speech, and visual features.

            Always clearly specify exactly what data should be extracted.
        media_path_prompt:
          name: Media Path Prompt
          description: The prompt which will be used for the LLM can provide the media path for the query.
          selector:
            text:
              multiline: true
          default: >-
            This argument is mandatory and must always be provided.

            Select the camera you want to analyze:
            - kho: http://localhost:1984/api/frame.jpeg?src=camera.ezvizkho
            - cong: http://localhost:1984/api/frame.jpeg?src=camera.ezvizcong
            - san: http://localhost:1984/api/frame.jpeg?src=camera.ezvizsan
            - pkhach: http://localhost:1984/api/frame.jpeg?src=camera.pkhach

            Enter the full URL of the camera you want to analyze.
        mime_type_prompt:
          name: MIME Type Prompt
          description: The prompt which will be used for the LLM can provide the MIME type of media for the query.
          selector:
            text:
              multiline: true
          default: >-
            This argument is mandatory and must always be provided.

            Always specify the MIME type of the media.
            Choose a value that matches the file contents (for example image/jpeg, video/mp4, audio/mp3, text/plain, or application/pdf).
mode: parallel
max_exceeded: silent
variables:
  version: 20251019
fields:
  instructions:
    name: Instructions
    description: !input instructions_prompt
    selector:
      text:
        multiline: true
    required: true
  media_path:
    name: Media Path
    description: !input media_path_prompt
    selector:
      text:
    required: true
  mime_type:
    name: MIME Type
    description: !input mime_type_prompt
    selector:
      text:
    required: true
sequence:
  - variables:
      google_ai_entity: !input google_ai_entity
      instructions: "{{ instructions | default('') | trim }}"
      media_path: "{{ media_path | default('') | trim }}"
      mime_type: "{{ mime_type | default('') | trim }}"
  - if:
      - alias: Check if variables were set correctly
        condition: template
        value_template: "{{ not instructions }}"
    then:
      - alias: Set variable for error message
        variables:
          response:
            error: >-
              Unable to extract data because instructions is missing or incorrect.
      - alias: Stop the script
        stop: >-
          Unable to extract data because instructions is missing or incorrect.
        response_variable: response
  - if:
      - alias: Check if variables were set correctly
        condition: template
        value_template: "{{ (media_path | length == 0) or (not media_path.startswith('http://')) }}"
    then:
      - alias: Set variable for error message
        variables:
          response:
            error: >-
              Unable to extract data because media path is missing or invalid. Provide a valid HTTP URL for the camera image.
      - alias: Stop the script
        stop: >-
          Unable to extract data because media path is missing or invalid.
        response_variable: response
  - if:
      - alias: Check if variables were set correctly
        condition: template
        value_template: "{{ not mime_type.startswith(('image/', 'video/', 'audio/', 'text/', 'application/')) }}"
    then:
      - alias: Set variable for error message
        variables:
          response:
            error: >-
              Unable to extract data because MIME type is missing or incorrect.
      - alias: Stop the script
        stop: >-
          Unable to extract data because MIME type is missing or incorrect.
        response_variable: response

  # Use Google Generative AI instead of AI Task
  - if:
      - condition: template
        value_template: "{{ not google_ai_entity }}"
    then:
      - action: conversation.process
        data:
          text: "{{ instructions }}"
          attachment:
            url: "{{ media_path }}"
        response_variable: result
    else:
      - action: conversation.process
        data:
          agent_id: "{{ google_ai_entity }}"
          text: "{{ instructions }}"
          attachment:
            url: "{{ media_path }}"
        response_variable: result

  - variables:
      response:
        data: "{{ result.speech }}"
  - stop: ""
    response_variable: response
