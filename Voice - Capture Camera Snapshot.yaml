blueprint:
  name: Voice - Capture Camera Snapshot
  author: Thai
  description: >-
    # Tool for capturing camera snapshots used for Voice Assistant

    ## Blueprint Setup

    ### Required

    * A template sensor stores all information about entity aliases needs to be configured in `config/configuration.yaml`; The sensor is required for friendly-name lookup.

    ```
    #File configuration.yaml
    shell_command:
      get_entity_alias: jq '[.data.entities[] | select(.options.conversation.should_expose == true and (.aliases | length > 0)) | {entity_id, aliases}]' ./.storage/core.entity_registry
    template:
      - triggers:
          - trigger: homeassistant
            event: start
          - trigger: event
            event_type: event_template_reloaded
        actions:
          - action: shell_command.get_entity_alias
            response_variable: response
        sensor:
          - name: "Assist: Entity IDs and Aliases"
            unique_id: entity_ids_and_aliases
            icon: mdi:format-list-bulleted
            device_class: timestamp
            state: "{{ now().isoformat() }}"
            attributes:
              entities: "{{ response.stdout }}"
    ```

    * Ensure the directory defined in the snapshot settings exists (default is `/media`).

    ### Optional

    * Adjust the prompts for each field used in the script. The descriptions guide the LLM to provide the correct input.

    ### Note

    * Provide a concise and precise description for the script. This will be utilized by the LLM to understand it should use this script for capturing a snapshot from a camera.

    * Make sure to expose camera entities to Assist.

    * Make sure to expose the script to Assist after the script has been saved.

    * Do not alter the default script name.
  domain: script
  homeassistant:
    min_version: 2024.10.0
  input:
    entity_aliases_settings:
      name: Settings for Entity Aliases
      icon: mdi:format-list-bulleted
      description: You can use these settings to configure a template sensor that stores all information about entity aliases.
      input:
        entity_aliases:
          name: Entity Aliases
          selector:
            entity:
              filter:
                - domain: sensor
                  integration: template
    snapshot_settings:
      name: Settings for Snapshot Output
      icon: mdi:folder-image
      description: Configure where snapshots should be stored and how filenames are generated.
      collapsed: true
      input:
        snapshot_directory:
          name: Snapshot Directory
          description: Absolute path where the snapshot will be stored (default is `/media`).
          selector:
            text:
          default: /media
        snapshot_filename_prefix:
          name: Snapshot Filename Prefix
          description: Prefix used when generating the snapshot filename.
          selector:
            text:
          default: camera_snapshot_
        snapshot_file_extension:
          name: Snapshot File Extension
          description: File extension to use for the snapshot (for example jpg or png).
          selector:
            text:
          default: jpg
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description: You can use these settings to finetune the prompts for your specific LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        camera_name_prompt:
          name: Camera Name Prompt
          description: The prompt which will be used for the LLM can provide the camera name.
          selector:
            text:
              multiline: true
          default: >-
            This argument is mandatory and must always be provided.

            Specify the camera name to capture the snapshot from.

            Use the friendly name that appears in Home Assistant (for example "Cam cửa trước").
mode: parallel
max_exceeded: silent
variables:
  version: 20251019
fields:
  camera_name:
    name: Camera Name
    description: !input camera_name_prompt
    selector:
      text:
    required: true
sequence:
  - variables:
      entity_aliases: !input entity_aliases
      camera_name: "{{ camera_name | default('') | trim }}"
      snapshot_directory_input: !input snapshot_directory
      snapshot_directory: "{{ snapshot_directory_input | default('/media', true) | trim }}"
      snapshot_prefix_input: !input snapshot_filename_prefix
      snapshot_prefix: "{{ snapshot_prefix_input | default('camera_snapshot_', true) | trim }}"
      snapshot_extension_input: !input snapshot_file_extension
      snapshot_extension: "{{ snapshot_extension_input | default('jpg', true) | trim | lower }}"
  - alias: Validate camera name
    if:
      - condition: template
        value_template: >-
          {% set friendly_match = states.camera | selectattr('attributes.friendly_name', '==', camera_name) | list %}
          {% set alias_match = state_attr(entity_aliases, 'entities') | default([]) | selectattr('entity_id', 'match', 'camera\.') | selectattr('aliases', 'contains', camera_name) | list %}
          {{ not camera_name or (friendly_match | length == 0 and alias_match | length == 0) }}
    then:
      - alias: Set variable for error message
        variables:
          response:
            error: Unable to capture a snapshot because the camera name is invalid.
      - alias: Stop the script
        stop: Unable to capture a snapshot because the camera name is invalid.
        response_variable: response
  - alias: Validate snapshot settings
    if:
      - condition: template
        value_template: >-
          {{ not snapshot_directory }}
    then:
      - alias: Set variable for error message
        variables:
          response:
            error: Unable to capture a snapshot because the snapshot directory is missing.
      - alias: Stop the script
        stop: Unable to capture a snapshot because the snapshot directory is missing.
        response_variable: response
  - variables:
      camera_entity_id: >-
        {% set friendly_match = states.camera | selectattr('attributes.friendly_name', '==', camera_name) | map(attribute='entity_id') | first %}
        {% if friendly_match %}
          {{ friendly_match }}
        {% else %}
          {% set alias_match = state_attr(entity_aliases, 'entities') | default([]) | selectattr('entity_id', 'match', 'camera\.') | selectattr('aliases', 'contains', camera_name) | map(attribute='entity_id') | first %}
          {% if alias_match %}
            {{ alias_match }}
          {% else %}
            {% set numeric_match = states.camera | selectattr('entity_id', 'match', 'camera\.[0-9_]+') | selectattr('attributes.friendly_name', '==', camera_name) | map(attribute='entity_id') | first %}
            {{ numeric_match }}
          {% endif %}
        {% endif %}
      sanitized_prefix: >-
        {% if snapshot_prefix %}
          {{ snapshot_prefix | regex_replace('[^0-9A-Za-z_-]', '_') }}
        {% else %}
          camera_snapshot_
        {% endif %}
      sanitized_extension: >-
        {% if snapshot_extension %}
          {% set ext = snapshot_extension | regex_replace('[^0-9a-z]', '') %}
          {{ '.' ~ (ext if ext else 'jpg') }}
        {% else %}
          .jpg
        {% endif %}
      snapshot_directory_normalized: >-
        {% if snapshot_directory %}
          {{ snapshot_directory.rstrip('/\\') }}
        {% else %}
          /media
        {% endif %}
      snapshot_random_suffix: "{{ '%05d' | format(range(0, 100000) | random) }}"
      snapshot_filename: >-
        {{ sanitized_prefix ~ now().strftime('%Y%m%d%H%M%S%f') ~ '_' ~ snapshot_random_suffix ~ sanitized_extension }}
      snapshot_full_path: >-
        {{ snapshot_directory_normalized ~ '/' ~ snapshot_filename }}
      returned_image_path: >-
        {% set prefix = '/media/' %}
        {% if snapshot_full_path.startswith(prefix) %}
          {{ 'local/' ~ snapshot_full_path[prefix | length:] }}
        {% else %}
          {{ snapshot_full_path }}
        {% endif %}
  - action: camera.snapshot
    target:
      entity_id: "{{ camera_entity_id }}"
    data:
      filename: "{{ snapshot_full_path }}"
  - variables:
      response:
        image_path: "{{ returned_image_path }}"
  - stop: ""
    response_variable: response
