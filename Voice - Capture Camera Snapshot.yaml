blueprint:
  name: Voice - Capture Camera Snapshot
  author: thaidv
  description: >-
    # Tool for capturing camera snapshots used for Voice Assistant
    ## Blueprint Setup
    ### Required
    * A template sensor stores all information about entity aliases needs to be configured in `config/configuration.yaml`; The sensor is required for friendly-name lookup.
    ```
    #File configuration.yaml
    shell_command:
      get_entity_alias: jq '[.data.entities[] | select(.options.conversation.should_expose == true and (.aliases | length > 0)) | {entity_id, aliases}]' ./.storage/core.entity_registry
    template:
      - triggers:
          - trigger: homeassistant
            event: start
          - trigger: event
            event_type: event_template_reloaded
        actions:
          - action: shell_command.get_entity_alias
            response_variable: response
        sensor:
          - name: "Assist: Entity IDs and Aliases"
            unique_id: entity_ids_and_aliases
            icon: mdi:format-list-bulleted
            device_class: timestamp
            state: "{{ now().isoformat() }}"
            attributes:
              entities: "{{ response.stdout }}"
    ```
    * Ensure the directory defined in the snapshot settings exists (default is `/media/ai_task/{today}/`).
  domain: script
  homeassistant:
    min_version: 2024.10.0
  input:
    entity_aliases_settings:
      name: Settings for Entity Aliases
      description: Configure the entity aliases sensor.
      input:
        entity_aliases:
          name: Entity Aliases Sensor
          selector:
            entity:
              domain: sensor
    snapshot_settings:
      name: Settings for Snapshot Output
      description: Configure where snapshots should be stored.
      input:
        snapshot_directory:
          name: Snapshot Base Directory
          default: /media/ai_task
          selector:
            text:
        snapshot_filename_prefix:
          name: Filename Prefix
          default: camera_snapshot_
          selector:
            text:
        snapshot_file_extension:
          name: File Extension
          default: jpg
          selector:
            text:
    prompt_settings:
      name: Prompt settings
      description: Adjust prompts for LLM.
      input:
        camera_name_prompt:
          name: Camera Name Prompt
          default: "Specify the camera name to capture snapshot from. Use the friendly name that appears in Home Assistant."
          selector:
            text:
              multiline: true
mode: parallel
max_exceeded: silent
fields:
  camera_name:
    name: Camera Name
    description: !input camera_name_prompt
    selector:
      text:
    required: true
sequence:
  - variables:
      entity_aliases: !input entity_aliases
      camera_name: "{{ camera_name | default('') | trim }}"
      snapshot_base_dir: "{{ (snapshot_directory | default('/media/ai_task', true)) | trim }}"
      snapshot_prefix: "{{ (snapshot_filename_prefix | default('camera_snapshot_', true)) | trim }}"
      snapshot_extension: "{{ (snapshot_file_extension | default('jpg', true)) | trim | lower }}"
      
      # Tạo đường dẫn với ngày hiện tại
      today_folder: "{{ now().strftime('%Y-%m-%d') }}"
      snapshot_directory_full: "{{ snapshot_base_dir.rstrip('/') }}/{{ today_folder }}"
  
  # Debug: Log thông tin camera
  - service: system_log.write
    data:
      level: info
      message: >-
        Camera search debug: 
        Input name: '{{ camera_name }}'
        All cameras: {{ states.camera | map(attribute='name') | list }}
        All friendly names: {{ states.camera | map(attribute='attributes.friendly_name') | list }}
        Snapshot directory: {{ snapshot_directory_full }}
  
  - alias: Find camera entity with improved search
    variables:
      # Tìm theo friendly_name chính xác
      friendly_match: "{{ states.camera | selectattr('attributes.friendly_name', '==', camera_name) | list }}"
      
      # Tìm theo friendly_name không phân biệt hoa thường
      case_insensitive_match: >-
        {% set cameras = states.camera | selectattr('attributes.friendly_name', '!=', 'none') | list %}
        {% set matches = [] %}
        {% for camera in cameras %}
          {% if camera.attributes.friendly_name | lower == camera_name | lower %}
            {% set matches = matches + [camera] %}
          {% endif %}
        {% endfor %}
        {{ matches }}
      
      # Tìm theo entity_id (nếu người dùng nhập entity_id)
      entity_id_match: "{{ true if camera_name.startswith('camera.') and states(camera_name) != 'unavailable' else false }}"
      
      # Tìm trong aliases
      alias_match: "{{ state_attr(entity_aliases, 'entities') | default([]) | selectattr('entity_id', 'match', 'camera\\.') | selectattr('aliases', 'contains', camera_name) | list }}"
    
    # Debug kết quả tìm kiếm
  - service: system_log.write
    data:
      level: info
      message: >-
        Search results: 
        Friendly match: {{ friendly_match | length }}
        Case insensitive: {{ case_insensitive_match | length }}
        Entity ID match: {{ entity_id_match }}
        Alias match: {{ alias_match | length }}
  
  - alias: Validate camera name
    if:
      - condition: template
        value_template: >-
          {% set has_match = 
            friendly_match | length > 0 or
            case_insensitive_match | length > 0 or 
            entity_id_match or
            alias_match | length > 0 %}
          {{ not camera_name or not has_match }}
    then:
      - service: system_log.write
        data:
          level: error
          message: >-
            Camera not found: '{{ camera_name }}'. 
            Available: {{ states.camera | map(attribute='attributes.friendly_name') | list }}
      - variables:
          response:
            error: "Không tìm thấy camera '{{ camera_name }}'. Các camera có sẵn: {{ states.camera | map(attribute='attributes.friendly_name') | list | join(', ') }}"
      - stop: "Camera không hợp lệ"
        response_variable: response

  - variables:
      camera_entity_id: >-
        {% if friendly_match | length > 0 %}
          {{ friendly_match[0].entity_id }}
        {% elif case_insensitive_match | length > 0 %}
          {{ case_insensitive_match[0].entity_id }}
        {% elif entity_id_match %}
          {{ camera_name }}
        {% elif alias_match | length > 0 %}
          {{ alias_match[0].entity_id }}
        {% endif %}
      
      sanitized_prefix: "{{ snapshot_prefix | regex_replace('[^0-9A-Za-z_-]', '_') }}"
      sanitized_extension: >-
        {% set ext = snapshot_extension | regex_replace('[^0-9a-z]', '') %}
        {{ '.' ~ (ext if ext else 'jpg') }}
      
      # Tạo tên file với timestamp
      snapshot_timestamp: "{{ now().strftime('%Y%m%d_%H%M%S') }}"
      snapshot_random_suffix: "{{ '%03d' | format(range(0, 1000) | random) }}"
      snapshot_filename: "{{ sanitized_prefix ~ snapshot_timestamp ~ '_' ~ snapshot_random_suffix ~ sanitized_extension }}"
      snapshot_full_path: "{{ snapshot_directory_full }}/{{ snapshot_filename }}"
  
  # Tạo thư mục nếu chưa tồn tại
  - alias: Create directory if not exists
    service: shell_command.create_directory
    data:
      path: "{{ snapshot_directory_full }}"
    enabled: false  # Tắt nếu không có shell_command tạo thư mục
  
  # Debug thông tin cuối cùng
  - service: system_log.write
    data:
      level: info
      message: >-
        Final camera selection: 
        Entity ID: {{ camera_entity_id }}
        Full Path: {{ snapshot_full_path }}
        Directory: {{ snapshot_directory_full }}

  - action: camera.snapshot
    target:
      entity_id: "{{ camera_entity_id }}"
    data:
      filename: "{{ snapshot_full_path }}"
  
  - variables:
      response:
        success: true
        image_path: "{{ snapshot_full_path }}"
        camera: "{{ camera_entity_id }}"
        directory: "{{ snapshot_directory_full }}"
        filename: "{{ snapshot_filename }}"
  
  - stop: "Snapshot captured successfully"
    response_variable: response
